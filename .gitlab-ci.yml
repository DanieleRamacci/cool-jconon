image: docker:latest
services:
  - docker:dind

stages:
  - deploy
  - build
  - catapult
  - release

variables:
  MAVEN_OPTS: "-Djava.awt.headless=true -Dsonar.host.url=$SONAR_HOST_URL -Dnexus.url=$NEXUS_URL -Dnexus.login=$NEXUS_USERNAME -Dnexus.pwd=$NEXUS_PASSWORD"
  MAVEN_CLI_OPTS: "-s .m2/settings.xml -Dmaven.repo.local=./.m2/repository -Drepository.base.url=$CMIS_BASE_URL -Dsiper.url=$SIPER_URL -Dsiper.username=$SIPER_USERNAME -Dsiper.password=$SIPER_PASSWORD --batch-mode --errors --fail-at-end --show-version"
  CONTAINER_TEST_IMAGE: $CI_PROJECT_PATH:$CI_COMMIT_REF_NAME
  CONTAINER_RELEASE_IMAGE: $CI_PROJECT_PATH:latest

cache:
  paths:
    - ./.m2/repository
  # keep cache across branch
  key: "$CI_BUILD_REF_NAME"
  
maven-deploy:
  stage: deploy
  image: maven:alpine
  before_script:
    - apk add --update nodejs nodejs-npm && rm -rf /var/cache/apk/*
  script: "mvn clean deploy $MAVEN_CLI_OPTS -Pprod -Dspring.profiles.active=siper"
  artifacts:
    paths:
      - cool-jconon-webapp/target/*.war
  only:
    - master
  except:
    - tags

maven-install:
  stage: deploy
  image: maven:alpine
  script: "mvn clean install $MAVEN_CLI_OPTS"
  artifacts:
    paths:
      - cool-jconon-webapp/target/*.war
  except:
    - tags
    - master

maven-deploy-central:
  stage: deploy
  image: maven:alpine
  before_script:
    - 'which gnupg || ( apk add --update gnupg && rm -rf /var/cache/apk/*)'
    - echo $GPG_SECRET_KEYS | base64 --decode | gpg --import
    - echo $GPG_OWNERTRUST | base64 --decode | gpg --import-ownertrust
  script: "mvn clean deploy -Pprod,maven-central -Dnexus.url=$SONATYPE_URL -Dnexus.login=$SONATYPE_USERNAME -Dnexus.pwd=$SONATYPE_PASSWORD -Dnexus.repository.releases=$SONATYPE_REPOSITORY_RELEASES -Dgpg.passphrase=$GPG_PASSPHRASE -DskipTests"
  artifacts:
    paths:
      - cool-jconon-webapp/target/*.war
  only:
    - tags

#Ad ogni nuovo tag viene fatta la push sul docker hub.
docker-build-push-hub:
  stage: build
  script:
    - docker build -t $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME .
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
    - docker tag $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME $DOCKER_HUB_ORGANIZATION/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME
    - docker tag $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME $DOCKER_HUB_ORGANIZATION/$CI_PROJECT_NAME:latest
    - docker push $DOCKER_HUB_ORGANIZATION/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME
    - docker push $DOCKER_HUB_ORGANIZATION/$CI_PROJECT_NAME:latest
  only:
    - tags


#Ad ogni nuovo commit sul master viene fatta la push sul docker registry.
docker-build-push-master:
  stage: build
  script:
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker tag $CONTAINER_TEST_IMAGE $CI_REGISTRY/$CONTAINER_RELEASE_IMAGE
    - docker push $CI_REGISTRY/$CONTAINER_RELEASE_IMAGE
  only:
    - master

#Ad ogni nuovo commit sul branch viene fatta la push sul docker registry.
docker-build-push-branches:
  stage: build
  script:
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker tag $CONTAINER_TEST_IMAGE $CI_REGISTRY/$CONTAINER_TEST_IMAGE
    - docker push $CI_REGISTRY/$CONTAINER_TEST_IMAGE
  except:
    - tags
    - master

#Aggiorno il container con l'immagine docker creata.
catapult-deploy-image:
  stage: catapult
  dependencies:
    - docker-build-push-branches
    - docker-build-push-master
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  script:
    - >
      curl --fail -s -X POST $CATAPULT_URL -H 'Content-type:application/json' --data '{"id":"'"$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME"'", "git":true}'
  except:
    - tags

#la release Ã¨ opzionale e manuale.
Perform Maven Release:
  stage: release
  image: maven:alpine
  script:
    # Install git ssh-agent nodejs if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apk add --update git openssh-client nodejs nodejs-npm && rm -rf /var/cache/apk/*)'

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in GIT_SSH_PRIV_KEY variable to the agent store
    - ssh-add <(echo "$GIT_SSH_PRIV_KEY")

    # For Docker builds disable host key checking. Be aware that by adding that
    # you are susceptible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git config --global user.email "marco.spasiano@cnr.it"
    - git config --global user.name "marco.spasiano"
    - git checkout -B "$CI_BUILD_REF_NAME"
    - mvn $MAVEN_CLI_OPTS clean release:prepare -Dresume=false -B -Pprod -DskipTests -Darguments="-DskipTests"
  only:
    - master
  when: manual
  